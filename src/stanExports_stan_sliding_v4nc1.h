// Generated by rstantools.  Do not edit by hand.

/*
    WhiteLabRt is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    WhiteLabRt is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with WhiteLabRt.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_stan_sliding_v4nc1_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 89> locations_array__ =
  {" (found before start of program)",
  " (in 'stan_sliding_v4nc1', line 15, column 2 to column 27)",
  " (in 'stan_sliding_v4nc1', line 16, column 2 to column 33)",
  " (in 'stan_sliding_v4nc1', line 17, column 2 to column 31)",
  " (in 'stan_sliding_v4nc1', line 19, column 2 to column 24)",
  " (in 'stan_sliding_v4nc1', line 20, column 2 to column 28)",
  " (in 'stan_sliding_v4nc1', line 25, column 2 to column 26)",
  " (in 'stan_sliding_v4nc1', line 26, column 2 to column 21)",
  " (in 'stan_sliding_v4nc1', line 29, column 2 to column 16)",
  " (in 'stan_sliding_v4nc1', line 31, column 2 to column 16)",
  " (in 'stan_sliding_v4nc1', line 32, column 2 to column 18)",
  " (in 'stan_sliding_v4nc1', line 43, column 2 to column 44)",
  " (in 'stan_sliding_v4nc1', line 45, column 4 to column 98)",
  " (in 'stan_sliding_v4nc1', line 44, column 19 to line 46, column 3)",
  " (in 'stan_sliding_v4nc1', line 44, column 2 to line 46, column 3)",
  " (in 'stan_sliding_v4nc1', line 56, column 6 to column 81)",
  " (in 'stan_sliding_v4nc1', line 55, column 21 to line 57, column 5)",
  " (in 'stan_sliding_v4nc1', line 55, column 4 to line 57, column 5)",
  " (in 'stan_sliding_v4nc1', line 54, column 16 to line 58, column 3)",
  " (in 'stan_sliding_v4nc1', line 54, column 2 to line 58, column 3)",
  " (in 'stan_sliding_v4nc1', line 63, column 6 to column 42)",
  " (in 'stan_sliding_v4nc1', line 62, column 18 to line 64, column 5)",
  " (in 'stan_sliding_v4nc1', line 62, column 4 to line 64, column 5)",
  " (in 'stan_sliding_v4nc1', line 61, column 16 to line 65, column 3)",
  " (in 'stan_sliding_v4nc1', line 61, column 2 to line 65, column 3)",
  " (in 'stan_sliding_v4nc1', line 70, column 4 to column 28)",
  " (in 'stan_sliding_v4nc1', line 69, column 16 to line 71, column 3)",
  " (in 'stan_sliding_v4nc1', line 69, column 2 to line 71, column 3)",
  " (in 'stan_sliding_v4nc1', line 77, column 4 to column 32)",
  " (in 'stan_sliding_v4nc1', line 80, column 4 to column 40)",
  " (in 'stan_sliding_v4nc1', line 86, column 11 to column 12)",
  " (in 'stan_sliding_v4nc1', line 86, column 14 to column 21)",
  " (in 'stan_sliding_v4nc1', line 86, column 4 to column 26)",
  " (in 'stan_sliding_v4nc1', line 88, column 6 to column 40)",
  " (in 'stan_sliding_v4nc1', line 87, column 25 to line 89, column 5)",
  " (in 'stan_sliding_v4nc1', line 87, column 4 to line 89, column 5)",
  " (in 'stan_sliding_v4nc1', line 91, column 11 to column 18)",
  " (in 'stan_sliding_v4nc1', line 91, column 4 to column 27)",
  " (in 'stan_sliding_v4nc1', line 92, column 4 to column 48)",
  " (in 'stan_sliding_v4nc1', line 94, column 4 to column 32)",
  " (in 'stan_sliding_v4nc1', line 95, column 4 to column 32)",
  " (in 'stan_sliding_v4nc1', line 96, column 4 to column 64)",
  " (in 'stan_sliding_v4nc1', line 74, column 16 to line 98, column 3)",
  " (in 'stan_sliding_v4nc1', line 74, column 2 to line 98, column 3)",
  " (in 'stan_sliding_v4nc1', line 104, column 2 to column 37)",
  " (in 'stan_sliding_v4nc1', line 105, column 2 to column 41)",
  " (in 'stan_sliding_v4nc1', line 107, column 6 to column 45)",
  " (in 'stan_sliding_v4nc1', line 106, column 18 to line 108, column 3)",
  " (in 'stan_sliding_v4nc1', line 106, column 2 to line 108, column 3)",
  " (in 'stan_sliding_v4nc1', line 110, column 4 to column 34)",
  " (in 'stan_sliding_v4nc1', line 112, column 6 to column 40)",
  " (in 'stan_sliding_v4nc1', line 111, column 20 to line 113, column 5)",
  " (in 'stan_sliding_v4nc1', line 111, column 4 to line 113, column 5)",
  " (in 'stan_sliding_v4nc1', line 109, column 16 to line 114, column 3)",
  " (in 'stan_sliding_v4nc1', line 109, column 2 to line 114, column 3)",
  " (in 'stan_sliding_v4nc1', line 118, column 8 to column 35)",
  " (in 'stan_sliding_v4nc1', line 117, column 20 to line 119, column 7)",
  " (in 'stan_sliding_v4nc1', line 117, column 6 to line 119, column 7)",
  " (in 'stan_sliding_v4nc1', line 116, column 16 to line 120, column 3)",
  " (in 'stan_sliding_v4nc1', line 116, column 2 to line 120, column 3)",
  " (in 'stan_sliding_v4nc1', line 2, column 2 to column 17)",
  " (in 'stan_sliding_v4nc1', line 3, column 2 to column 18)",
  " (in 'stan_sliding_v4nc1', line 4, column 15 to column 16)",
  " (in 'stan_sliding_v4nc1', line 4, column 2 to column 18)",
  " (in 'stan_sliding_v4nc1', line 5, column 2 to column 17)",
  " (in 'stan_sliding_v4nc1', line 6, column 17 to column 18)",
  " (in 'stan_sliding_v4nc1', line 6, column 19 to column 20)",
  " (in 'stan_sliding_v4nc1', line 6, column 2 to column 22)",
  " (in 'stan_sliding_v4nc1', line 7, column 9 to column 12)",
  " (in 'stan_sliding_v4nc1', line 7, column 13 to column 14)",
  " (in 'stan_sliding_v4nc1', line 7, column 2 to column 18)",
  " (in 'stan_sliding_v4nc1', line 8, column 2 to column 17)",
  " (in 'stan_sliding_v4nc1', line 9, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 9, column 2 to column 14)",
  " (in 'stan_sliding_v4nc1', line 10, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 10, column 2 to column 23)",
  " (in 'stan_sliding_v4nc1', line 16, column 9 to column 11)",
  " (in 'stan_sliding_v4nc1', line 19, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 20, column 9 to column 11)",
  " (in 'stan_sliding_v4nc1', line 20, column 13 to column 14)",
  " (in 'stan_sliding_v4nc1', line 25, column 9 to column 11)",
  " (in 'stan_sliding_v4nc1', line 26, column 9 to column 11)",
  " (in 'stan_sliding_v4nc1', line 26, column 13 to column 14)",
  " (in 'stan_sliding_v4nc1', line 29, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 29, column 11 to column 12)",
  " (in 'stan_sliding_v4nc1', line 31, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 31, column 11 to column 12)",
  " (in 'stan_sliding_v4nc1', line 32, column 9 to column 10)",
  " (in 'stan_sliding_v4nc1', line 32, column 12 to column 13)"};
#include <stan_meta_header.hpp>
class model_stan_sliding_v4nc1 final : public model_base_crtp<model_stan_sliding_v4nc1> {
private:
  int N;
  int NW;
  std::vector<int> week_vec;
  int J;
  std::vector<std::vector<int>> Y;
  Eigen::Matrix<double,-1,-1> P_data__;
  int S;
  Eigen::Matrix<double,-1,1> W_data__;
  Eigen::Matrix<double,-1,1> init_cases_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> P{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> W{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> init_cases{nullptr, 0};
public:
  ~model_stan_sliding_v4nc1() {}
  model_stan_sliding_v4nc1(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_stan_sliding_v4nc1_namespace::model_stan_sliding_v4nc1";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 60;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 60;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "NW", "int",
        std::vector<size_t>{});
      NW = std::numeric_limits<int>::min();
      current_statement__ = 61;
      NW = context__.vals_i("NW")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "NW", NW, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("week_vec", "N", N);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "week_vec", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      week_vec = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 63;
      week_vec = context__.vals_i("week_vec");
      current_statement__ = 64;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 64;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("Y", "J", J);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(J)});
      Y = std::vector<std::vector<int>>(N,
            std::vector<int>(J, std::numeric_limits<int>::min()));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 67;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 67;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 67;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("P", "N * J", (N * J));
      current_statement__ = 69;
      stan::math::validate_non_negative_index("P", "J", J);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "P", "double",
        std::vector<size_t>{static_cast<size_t>((N * J)),
          static_cast<size_t>(J)});
      P_data__ = Eigen::Matrix<double,-1,-1>::Constant((N * J), J,
                   std::numeric_limits<double>::quiet_NaN());
      new (&P) Eigen::Map<Eigen::Matrix<double,-1,-1>>(P_data__.data(), (N *
        J), J);
      {
        std::vector<local_scalar_t__> P_flat__;
        current_statement__ = 70;
        P_flat__ = context__.vals_r("P");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= (N * J); ++sym2__) {
            current_statement__ = 70;
            stan::model::assign(P, P_flat__[(pos__ - 1)],
              "assigning variable P", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 70;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 71;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 71;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "S", S, 1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("W", "S", S);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "W", "double",
        std::vector<size_t>{static_cast<size_t>(S)});
      W_data__ = Eigen::Matrix<double,-1,1>::Constant(S,
                   std::numeric_limits<double>::quiet_NaN());
      new (&W) Eigen::Map<Eigen::Matrix<double,-1,1>>(W_data__.data(), S);
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 73;
        W_flat__ = context__.vals_r("W");
        current_statement__ = 73;
        pos__ = 1;
        current_statement__ = 73;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 73;
          stan::model::assign(W, W_flat__[(pos__ - 1)],
            "assigning variable W", stan::model::index_uni(sym1__));
          current_statement__ = 73;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 74;
      stan::math::validate_non_negative_index("init_cases", "J", J);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "init_cases", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      init_cases_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                            std::numeric_limits<double>::quiet_NaN());
      new (&init_cases)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(init_cases_data__.data(), J);
      {
        std::vector<local_scalar_t__> init_cases_flat__;
        current_statement__ = 75;
        init_cases_flat__ = context__.vals_r("init_cases");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 75;
          stan::model::assign(init_cases, init_cases_flat__[(pos__ - 1)],
            "assigning variable init_cases", stan::model::index_uni(sym1__));
          current_statement__ = 75;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 76;
      stan::math::validate_non_negative_index("logRt_central_error", "NW", NW);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("sigma_logRt", "J", J);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("logRt_error", "NW", NW);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("logRt_error", "J", J);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("logR_central", "NW", NW);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("logR", "NW", NW);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("logR", "J", J);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("R", "N", N);
      current_statement__ = 84;
      stan::math::validate_non_negative_index("R", "J", J);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("M", "N", N);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("M", "J", J);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("RR", "J", J);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("RR", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + NW + 1 + J + (NW * J);
  }
  inline std::string model_name() const final {
    return "model_stan_sliding_v4nc1";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_stan_sliding_v4nc1_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma_logRt_central = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_logRt_central = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> logRt_central_error =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NW, DUMMY_VAR__);
      current_statement__ = 2;
      logRt_central_error = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(NW);
      local_scalar_t__ logRt_central_intercept = DUMMY_VAR__;
      current_statement__ = 3;
      logRt_central_intercept = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_logRt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      sigma_logRt = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,-1> logRt_error =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NW, J, DUMMY_VAR__);
      current_statement__ = 5;
      logRt_error = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(NW, J);
      Eigen::Matrix<local_scalar_t__,-1,1> logR_central =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NW, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> logR =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NW, J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> R =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> M =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> RR =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, J, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(logR_central, logRt_central_intercept,
        "assigning variable logR_central", stan::model::index_uni(1));
      current_statement__ = 14;
      for (int w_i = 2; w_i <= NW; ++w_i) {
        current_statement__ = 12;
        stan::model::assign(logR_central,
          (stan::model::rvalue(logR_central, "logR_central",
             stan::model::index_uni((w_i - 1))) +
          (stan::math::exp(sigma_logRt_central) *
          stan::model::rvalue(logRt_central_error, "logRt_central_error",
            stan::model::index_uni(w_i)))),
          "assigning variable logR_central", stan::model::index_uni(w_i));
      }
      current_statement__ = 19;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 17;
        for (int w_i = 1; w_i <= NW; ++w_i) {
          current_statement__ = 15;
          stan::model::assign(logR,
            (stan::model::rvalue(logR_central, "logR_central",
               stan::model::index_uni(w_i)) +
            (stan::math::exp(
               stan::model::rvalue(sigma_logRt, "sigma_logRt",
                 stan::model::index_uni(j))) *
            stan::model::rvalue(logRt_error, "logRt_error",
              stan::model::index_uni(w_i), stan::model::index_uni(j)))),
            "assigning variable logR", stan::model::index_uni(w_i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 24;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 22;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 20;
          stan::model::assign(R,
            stan::math::exp(
              stan::model::rvalue(logR, "logR",
                stan::model::index_uni(
                  stan::model::rvalue(week_vec, "week_vec",
                    stan::model::index_uni(n))), stan::model::index_uni(j))),
            "assigning variable R", stan::model::index_uni(n),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 27;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 25;
        stan::model::assign(M,
          stan::model::rvalue(init_cases, "init_cases",
            stan::model::index_uni(j)), "assigning variable M",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
      current_statement__ = 43;
      for (int n = 2; n <= N; ++n) {
        int tau_end = std::numeric_limits<int>::min();
        current_statement__ = 28;
        tau_end = stan::math::min(S, (n - 1));
        current_statement__ = 29;
        stan::model::assign(RR,
          stan::math::diag_matrix(
            stan::math::to_vector(
              stan::model::rvalue(R, "R", stan::model::index_uni(n),
                stan::model::index_omni()))), "assigning variable RR");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("MM", "J", J);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("MM", "tau_end", tau_end);
        Eigen::Matrix<local_scalar_t__,-1,-1> MM =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(J, tau_end,
            DUMMY_VAR__);
        current_statement__ = 35;
        for (int tt = 1; tt <= tau_end; ++tt) {
          current_statement__ = 33;
          stan::model::assign(MM,
            stan::math::to_vector(
              stan::model::rvalue(M, "M", stan::model::index_uni((n - tt)),
                stan::model::index_omni())), "assigning variable MM",
            stan::model::index_omni(), stan::model::index_uni(tt));
        }
        current_statement__ = 36;
        stan::math::validate_non_negative_index("w_i", "tau_end", tau_end);
        Eigen::Matrix<local_scalar_t__,-1,-1> w_i =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(tau_end, 1,
            DUMMY_VAR__);
        current_statement__ = 38;
        stan::model::assign(w_i,
          stan::math::to_vector(
            stan::model::rvalue(W, "W",
              stan::model::index_min_max(1, tau_end))),
          "assigning variable w_i", stan::model::index_min_max(1, tau_end),
          stan::model::index_uni(1));
        int start_P = std::numeric_limits<int>::min();
        current_statement__ = 39;
        start_P = ((J * (n - 1)) + 1);
        int end_P = std::numeric_limits<int>::min();
        current_statement__ = 40;
        end_P = ((J * (n - 1)) + J);
        current_statement__ = 41;
        stan::model::assign(M,
          stan::math::to_row_vector(
            stan::math::multiply(
              stan::math::multiply(
                stan::math::multiply(
                  stan::math::transpose(
                    stan::model::rvalue(P, "P",
                      stan::model::index_min_max(start_P, end_P),
                      stan::model::index_omni())), RR), MM), w_i)),
          "assigning variable M", stan::model::index_uni(n),
          stan::model::index_omni());
      }
      {
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_logRt_central,
                         0, 1));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         logRt_central_intercept, 1, 1));
        current_statement__ = 48;
        for (int ww = 1; ww <= NW; ++ww) {
          current_statement__ = 46;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(logRt_central_error,
                             "logRt_central_error",
                             stan::model::index_uni(ww)), 1, 1));
        }
        current_statement__ = 54;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 49;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(sigma_logRt, "sigma_logRt",
                             stan::model::index_uni(j)), 0, 1));
          current_statement__ = 52;
          for (int ww = 1; ww <= NW; ++ww) {
            current_statement__ = 50;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(logRt_error, "logRt_error",
                               stan::model::index_uni(ww),
                               stan::model::index_uni(j)), 1, 1));
          }
        }
        current_statement__ = 59;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 57;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 55;
            lp_accum__.add(stan::math::poisson_lpmf<propto__>(
                             stan::model::rvalue(Y, "Y",
                               stan::model::index_uni(n),
                               stan::model::index_uni(j)),
                             stan::model::rvalue(M, "M",
                               stan::model::index_uni(n),
                               stan::model::index_uni(j))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_stan_sliding_v4nc1_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma_logRt_central = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma_logRt_central = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> logRt_central_error =
        Eigen::Matrix<double,-1,1>::Constant(NW,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      logRt_central_error = in__.template read<
                              Eigen::Matrix<local_scalar_t__,-1,1>>(NW);
      double logRt_central_intercept =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      logRt_central_intercept = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> sigma_logRt =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sigma_logRt = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,-1> logRt_error =
        Eigen::Matrix<double,-1,-1>::Constant(NW, J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      logRt_error = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,-1>>(NW, J);
      Eigen::Matrix<double,-1,1> logR_central =
        Eigen::Matrix<double,-1,1>::Constant(NW,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> logR =
        Eigen::Matrix<double,-1,-1>::Constant(NW, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> R =
        Eigen::Matrix<double,-1,-1>::Constant(N, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> M =
        Eigen::Matrix<double,-1,-1>::Constant(N, J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> RR =
        Eigen::Matrix<double,-1,-1>::Constant(J, J,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma_logRt_central);
      out__.write(logRt_central_error);
      out__.write(logRt_central_intercept);
      out__.write(sigma_logRt);
      out__.write(logRt_error);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(logR_central, logRt_central_intercept,
        "assigning variable logR_central", stan::model::index_uni(1));
      current_statement__ = 14;
      for (int w_i = 2; w_i <= NW; ++w_i) {
        current_statement__ = 12;
        stan::model::assign(logR_central,
          (stan::model::rvalue(logR_central, "logR_central",
             stan::model::index_uni((w_i - 1))) +
          (stan::math::exp(sigma_logRt_central) *
          stan::model::rvalue(logRt_central_error, "logRt_central_error",
            stan::model::index_uni(w_i)))),
          "assigning variable logR_central", stan::model::index_uni(w_i));
      }
      current_statement__ = 19;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 17;
        for (int w_i = 1; w_i <= NW; ++w_i) {
          current_statement__ = 15;
          stan::model::assign(logR,
            (stan::model::rvalue(logR_central, "logR_central",
               stan::model::index_uni(w_i)) +
            (stan::math::exp(
               stan::model::rvalue(sigma_logRt, "sigma_logRt",
                 stan::model::index_uni(j))) *
            stan::model::rvalue(logRt_error, "logRt_error",
              stan::model::index_uni(w_i), stan::model::index_uni(j)))),
            "assigning variable logR", stan::model::index_uni(w_i),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 24;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 22;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 20;
          stan::model::assign(R,
            stan::math::exp(
              stan::model::rvalue(logR, "logR",
                stan::model::index_uni(
                  stan::model::rvalue(week_vec, "week_vec",
                    stan::model::index_uni(n))), stan::model::index_uni(j))),
            "assigning variable R", stan::model::index_uni(n),
            stan::model::index_uni(j));
        }
      }
      current_statement__ = 27;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 25;
        stan::model::assign(M,
          stan::model::rvalue(init_cases, "init_cases",
            stan::model::index_uni(j)), "assigning variable M",
          stan::model::index_uni(1), stan::model::index_uni(j));
      }
      current_statement__ = 43;
      for (int n = 2; n <= N; ++n) {
        int tau_end = std::numeric_limits<int>::min();
        current_statement__ = 28;
        tau_end = stan::math::min(S, (n - 1));
        current_statement__ = 29;
        stan::model::assign(RR,
          stan::math::diag_matrix(
            stan::math::to_vector(
              stan::model::rvalue(R, "R", stan::model::index_uni(n),
                stan::model::index_omni()))), "assigning variable RR");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("MM", "J", J);
        current_statement__ = 31;
        stan::math::validate_non_negative_index("MM", "tau_end", tau_end);
        Eigen::Matrix<double,-1,-1> MM =
          Eigen::Matrix<double,-1,-1>::Constant(J, tau_end,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 35;
        for (int tt = 1; tt <= tau_end; ++tt) {
          current_statement__ = 33;
          stan::model::assign(MM,
            stan::math::to_vector(
              stan::model::rvalue(M, "M", stan::model::index_uni((n - tt)),
                stan::model::index_omni())), "assigning variable MM",
            stan::model::index_omni(), stan::model::index_uni(tt));
        }
        current_statement__ = 36;
        stan::math::validate_non_negative_index("w_i", "tau_end", tau_end);
        Eigen::Matrix<double,-1,-1> w_i =
          Eigen::Matrix<double,-1,-1>::Constant(tau_end, 1,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 38;
        stan::model::assign(w_i,
          stan::math::to_vector(
            stan::model::rvalue(W, "W",
              stan::model::index_min_max(1, tau_end))),
          "assigning variable w_i", stan::model::index_min_max(1, tau_end),
          stan::model::index_uni(1));
        int start_P = std::numeric_limits<int>::min();
        current_statement__ = 39;
        start_P = ((J * (n - 1)) + 1);
        int end_P = std::numeric_limits<int>::min();
        current_statement__ = 40;
        end_P = ((J * (n - 1)) + J);
        current_statement__ = 41;
        stan::model::assign(M,
          stan::math::to_row_vector(
            stan::math::multiply(
              stan::math::multiply(
                stan::math::multiply(
                  stan::math::transpose(
                    stan::model::rvalue(P, "P",
                      stan::model::index_min_max(start_P, end_P),
                      stan::model::index_omni())), RR), MM), w_i)),
          "assigning variable M", stan::model::index_uni(n),
          stan::model::index_omni());
      }
      if (emit_transformed_parameters__) {
        out__.write(logR_central);
        out__.write(logR);
        out__.write(R);
        out__.write(M);
        out__.write(RR);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma_logRt_central = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_logRt_central = in__.read<local_scalar_t__>();
      out__.write(sigma_logRt_central);
      Eigen::Matrix<local_scalar_t__,-1,1> logRt_central_error =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NW, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(logRt_central_error,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NW),
        "assigning variable logRt_central_error");
      out__.write(logRt_central_error);
      local_scalar_t__ logRt_central_intercept = DUMMY_VAR__;
      current_statement__ = 3;
      logRt_central_intercept = in__.read<local_scalar_t__>();
      out__.write(logRt_central_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_logRt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sigma_logRt,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable sigma_logRt");
      out__.write(sigma_logRt);
      Eigen::Matrix<local_scalar_t__,-1,-1> logRt_error =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NW, J, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(logRt_error,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(NW, J),
        "assigning variable logRt_error");
      out__.write(logRt_error);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization",
        "sigma_logRt_central", "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization",
        "logRt_central_error", "double",
        std::vector<size_t>{static_cast<size_t>(NW)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization",
        "logRt_central_intercept", "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma_logRt",
        "double", std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "logRt_error",
        "double",
        std::vector<size_t>{static_cast<size_t>(NW), static_cast<size_t>(J)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma_logRt_central = DUMMY_VAR__;
      current_statement__ = 1;
      sigma_logRt_central = context__.vals_r("sigma_logRt_central")[(1 - 1)];
      out__.write(sigma_logRt_central);
      Eigen::Matrix<local_scalar_t__,-1,1> logRt_central_error =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NW, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logRt_central_error_flat__;
        current_statement__ = 2;
        logRt_central_error_flat__ = context__.vals_r("logRt_central_error");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= NW; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(logRt_central_error,
            logRt_central_error_flat__[(pos__ - 1)],
            "assigning variable logRt_central_error",
            stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(logRt_central_error);
      local_scalar_t__ logRt_central_intercept = DUMMY_VAR__;
      current_statement__ = 3;
      logRt_central_intercept = context__.vals_r("logRt_central_intercept")[(1
        - 1)];
      out__.write(logRt_central_intercept);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_logRt =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_logRt_flat__;
        current_statement__ = 4;
        sigma_logRt_flat__ = context__.vals_r("sigma_logRt");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(sigma_logRt, sigma_logRt_flat__[(pos__ - 1)],
            "assigning variable sigma_logRt", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(sigma_logRt);
      Eigen::Matrix<local_scalar_t__,-1,-1> logRt_error =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NW, J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> logRt_error_flat__;
        current_statement__ = 5;
        logRt_error_flat__ = context__.vals_r("logRt_error");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= NW; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(logRt_error, logRt_error_flat__[(pos__ - 1)],
              "assigning variable logRt_error",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(logRt_error);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma_logRt_central",
                "logRt_central_error", "logRt_central_intercept",
                "sigma_logRt", "logRt_error"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"logR_central", "logR", "R", "M", "RR"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(NW)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(NW),
                  static_cast<size_t>(J)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(NW)},
             std::vector<size_t>{static_cast<size_t>(NW),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J),
               static_cast<size_t>(J)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_logRt_central");
    for (int sym1__ = 1; sym1__ <= NW; ++sym1__) {
      param_names__.emplace_back(std::string() + "logRt_central_error" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "logRt_central_intercept");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_logRt" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= NW; ++sym2__) {
        param_names__.emplace_back(std::string() + "logRt_error" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NW; ++sym1__) {
        param_names__.emplace_back(std::string() + "logR_central" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NW; ++sym2__) {
          param_names__.emplace_back(std::string() + "logR" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "R" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "M" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "RR" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma_logRt_central");
    for (int sym1__ = 1; sym1__ <= NW; ++sym1__) {
      param_names__.emplace_back(std::string() + "logRt_central_error" + '.'
        + std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "logRt_central_intercept");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_logRt" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= NW; ++sym2__) {
        param_names__.emplace_back(std::string() + "logRt_error" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NW; ++sym1__) {
        param_names__.emplace_back(std::string() + "logR_central" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NW; ++sym2__) {
          param_names__.emplace_back(std::string() + "logR" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "R" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "M" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          param_names__.emplace_back(std::string() + "RR" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_logRt_central\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"logRt_central_error\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NW) + "},\"block\":\"parameters\"},{\"name\":\"logRt_central_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"logRt_error\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NW) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"logR_central\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NW) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logR\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NW) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"M\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"RR\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma_logRt_central\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"logRt_central_error\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NW) + "},\"block\":\"parameters\"},{\"name\":\"logRt_central_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_logRt\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"logRt_error\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NW) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"logR_central\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NW) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logR\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NW) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"M\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"RR\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(J) + ",\"cols\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + NW) + 1) + J) + (NW * J));
    const size_t num_transformed = emit_transformed_parameters * (((((NW +
      (NW * J)) + (N * J)) + (N * J)) + (J * J)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + NW) + 1) + J) + (NW * J));
    const size_t num_transformed = emit_transformed_parameters * (((((NW +
      (NW * J)) + (N * J)) + (N * J)) + (J * J)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_stan_sliding_v4nc1_namespace::model_stan_sliding_v4nc1;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_stan_sliding_v4nc1_namespace::profiles__;
}
#endif
#endif
